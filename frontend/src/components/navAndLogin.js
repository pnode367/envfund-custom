import React, { useState, useEffect } from 'react';
import { BarChart2, FileText, Inbox, LogIn, LogOut, Menu, Bell, Search, Settings, Users, MessageSquare, PieChart, LifeBuoy, FileCheck2, Zap, Globe } from 'lucide-react';
import {theme} from '../utils/theme';
export const Sidebar = ({ user, isOpen, activeView, setActiveView, setDetailView, openModal, t, language }) => {
    const navConfig = { applicant: [ { key: 'dashboard', icon: <PieChart />, text: t('dashboard') }, { key: 'applications', icon: <FileText />, text: t('applications') }, { key: 'chat', icon: <MessageSquare />, text: t('chat') }, { key: 'settings', icon: <Settings />, text: t('settings') } ], reviewer: [ { key: 'dashboard', icon: <PieChart />, text: t('dashboard') }, { key: 'assignments', icon: <Inbox />, text: 'Assigned Requests' }, { key: 'settings', icon: <Settings />, text: t('settings') } ], editor: [ { key: 'dashboard', icon: <PieChart />, text: t('dashboard') }, { key: 'templates', icon: <FileCheck2 />, text: 'Manage Templates' }, { key: 'settings', icon: <Settings />, text: t('settings') } ], admin: [ { key: 'dashboard', icon: <PieChart />, text: t('dashboard') }, { key: 'manage-applications', icon: <FileText />, text: t('manageApplications') }, { key: 'manage-users', icon: <Users />, text: t('manageUsers') }, { key: 'reports', icon: <BarChart2 />, text: t('reportsAndStats') }, { key: 'integrations', icon: <Zap/>, text: t('integrations') }, { key: 'settings', icon: <Settings />, text: t('settings') } ], };
    const navItems = navConfig[user.role] || [];
    const handleNavClick = (key) => { setDetailView(null); setActiveView(key); }
    const sidebarClasses = language === 'ar' ? `fixed top-0 right-0 border-l ${isOpen ? 'translate-x-0' : 'translate-x-full'}` : `fixed top-0 left-0 border-r ${isOpen ? 'translate-x-0' : '-translate-x-full'}`;
    return <div className={`h-full bg-white border-gray-200 z-30 transition-transform duration-300 lg:translate-x-0 w-64 ${sidebarClasses}`}> <div className={`flex items-center justify-center p-4 border-b h-16 bg-${theme.primary}`}><img src={theme.logoUrl} alt="Logo" className="h-8 w-auto" /></div> <nav className="p-4"><ul>{navItems.map((item) => (<li key={item.key}><button onClick={() => handleNavClick(item.key)} className={`w-full flex items-center gap-3 p-3 rounded-lg my-1 transition-colors ${activeView === item.key ? `bg-${theme.lightBg} text-${theme.lightText} font-bold` : 'text-gray-600 hover:bg-gray-100'}`}>{React.cloneElement(item.icon, { size: 20 })}<span>{item.text}</span></button></li>))}<li className="absolute bottom-4 w-[calc(100%-2rem)]"><button onClick={() => openModal('support')} className="w-full flex items-center gap-3 p-3 rounded-lg text-gray-600 hover:bg-gray-100"><LifeBuoy size={20} /><span>{t('supportCenter')}</span></button></li></ul></nav> </div>;
};
export const Header = ({ user, onLogout, onToggleSidebar, t, language, setLanguage, setActiveView, notifications }) => {
    const [isNotificationsOpen, setNotificationsOpen] = useState(false);
    const unreadCount = notifications.filter(n => n.unread).length;
    const toggleLanguage = () => setLanguage(lang => lang === 'ar' ? 'en' : 'ar');
    return ( <header className="bg-white/80 backdrop-blur-md shadow-sm sticky top-0 z-20 h-16"> <div className="flex justify-between items-center h-full px-4 sm:px-6 lg:p-8"> <div className="flex items-center gap-4"><button onClick={onToggleSidebar} className="lg:hidden p-2 rounded-full text-gray-500 hover:bg-gray-100"><Menu /></button><div className="relative hidden sm:block"><Search className={`absolute top-1/2 -translate-y-1/2 text-gray-400 ${language === 'ar' ? 'right-3' : 'left-3'}`} size={20}/><input type="text" placeholder={t('searchPlaceholder')} className={`bg-gray-100 rounded-full py-2 w-64 focus:outline-none focus:ring-2 focus:ring-${theme.primary} ${language === 'ar' ? 'pr-10 pl-4' : 'pl-10 pr-4'}`} /></div></div> <div className="flex items-center gap-2 sm:gap-4"> <button onClick={toggleLanguage} className="p-2 rounded-full text-gray-500 hover:bg-gray-100"><Globe/></button> <div className="relative"><button onClick={() => setNotificationsOpen(o => !o)} className="p-2 rounded-full text-gray-500 hover:bg-gray-100 relative"><Bell />{unreadCount > 0 && <span className="absolute top-1 right-1 flex h-4 w-4 items-center justify-center rounded-full bg-red-500 text-white text-xs ring-2 ring-white">{unreadCount}</span>}</button> {isNotificationsOpen && <div className={`absolute top-full mt-2 w-80 bg-white rounded-lg shadow-xl border z-30 ${language === 'ar' ? 'left-0' : 'right-0'}`}> <div className="p-3 font-bold border-b">{t('notifications')}</div> <div className="divide-y max-h-96 overflow-y-auto"> {notifications.map(n => <div key={n.id} className="p-3 flex items-start gap-3 hover:bg-gray-50"><div>{n.icon}</div><div><p className={`text-sm ${n.unread ? 'font-bold' : ''}`}>{n.text}</p><p className="text-xs text-gray-400 mt-1">{n.time}</p></div></div>)} </div> <div className="p-2 text-center bg-gray-50 border-t"><a href="#" className={`text-sm font-semibold text-${theme.primary}`}>{t('viewAll')}</a></div> </div>} </div> <button onClick={() => setActiveView('settings')} className="flex items-center gap-3 cursor-pointer"><img src={`https://placehold.co/40x40/7f9cf5/ffffff?text=${user.name.charAt(0)}`} alt="User Avatar" className="w-10 h-10 rounded-full" /><div className={`text-sm hidden sm:block ${language === 'ar' ? 'text-right' : 'text-left'}`}><p className="font-semibold">{user.name}</p><p className={`text-xs text-${theme.primary} font-bold capitalize`}>{t(user.role)}</p></div></button><button onClick={onLogout} title={t('logout')} className="p-2 rounded-full text-gray-500 hover:bg-red-100 hover:text-red-600"><LogOut /></button></div> </div> </header> );
};
export const LoginPage = ({ onLogin, t, language }) => { const [email, setEmail] = useState('applicant@demo.com'); const [password, setPassword] = useState('password123'); const [role, setRole] = useState('applicant'); const defaultCredentials = { applicant: 'applicant@demo.com', reviewer: 'reviewer@demo.com', editor: 'editor@demo.com', admin: 'admin@demo.com' }; useEffect(() => { if (defaultCredentials[role]) { setEmail(defaultCredentials[role]); setPassword('password123'); } }, [role]); const handleSubmit = (e) => { e.preventDefault(); onLogin(email, role); }; return <div className="flex items-center justify-center min-h-screen bg-gray-100 font-tajawal"> <div className="w-full max-w-md p-8 space-y-6 bg-white rounded-2xl shadow-lg"> <div className="text-center"><img src={theme.logoIconUrl} alt="Logo" className="w-28 h-28 mx-auto" /><h2 className="mt-6 text-3xl font-bold text-gray-900">{t('grantManagementPlatform')}</h2><p className="mt-2 text-sm text-gray-600">{t('forEnvironmentalSustainability')}</p></div> <form className="space-y-4" onSubmit={handleSubmit}> <div><label className="font-medium">{t('email')}</label><input type="email" value={email} onChange={(e) => setEmail(e.target.value)} required className="w-full mt-2 p-3 border rounded-lg"/></div> <div><label className="font-medium">{t('password')}</label><input type="password" value={password} onChange={(e) => setPassword(e.target.value)} required className="w-full mt-2 p-3 border rounded-lg"/></div> <div><label className="font-medium">{t('userType')}</label><select value={role} onChange={(e) => setRole(e.target.value)} className="w-full mt-2 p-3 border rounded-lg bg-white"><option value="applicant">{t('applicant')}</option><option value="reviewer">{t('reviewer')}</option><option value="editor">{t('editor')}</option><option value="admin">{t('admin')}</option></select></div> <button type="submit" className={`w-full flex justify-center items-center gap-2 py-3 px-4 text-lg font-semibold rounded-lg text-white bg-${theme.primary} hover:bg-${theme.primaryHover} transition-all duration-300`}><LogIn /> {t('login')}</button> </form> </div> </div>; };
